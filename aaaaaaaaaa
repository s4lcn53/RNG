-- bruh skidder just rayfield nothings special
-- loadstring
if game.PlaceId == 91694942823334 then
print("Work game")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Window
local Window = Rayfield:CreateWindow({
   Name = "Unknown",
   Icon = 0,
   LoadingTitle = "Loading...",
   LoadingSubtitle = "by Unknown",
   Theme = "Ocean",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "Hentai"
   },

   Discord = {
      Enabled = false,
      Invite = "discord.gg/Jb34zXH3RN",
      RememberJoins = true
   },

   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

--Notify
Rayfield:Notify({
   Title = "Thank for using my scriptüíï",
   Content = "Please join discord for updates",
   Duration = 7.5,
   Image = nil,
})

-- Main
getgenv().Auto_Click = true;

--Function
function Auto_Click()
   while task.wait(0.00001) do
       if getgenv().Auto_Click == true then
       for _, model in pairs(workspace.Sanses:GetChildren()) do
           local clickHitbox = model:FindFirstChildWhichIsA("ClickHitbox")
           if clickHitbox then
               local clickDetector = clickHitbox:FindFirstChild("ClickDetector")
               if clickDetector then
                   fireclickdetector(clickDetector)
               end
           end
           task.wait(0.00001)
      end
   end
  end
end

-- Tab/ etc
local Tab = Window:CreateTab(" ‚ò†Ô∏è Main") -- Title, Image
local Section = Tab:CreateSection("Don't use weapon while toggle this! or it might bug")


-- Toggles
local Toggle = Tab:CreateToggle({
   Name = "Auto Click All sans",
   CurrentValue = false,
   Flag = "Click", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().Auto_Click = Value
      Auto_Click()
   end,
})



-- Buttons
local Section = Tab:CreateSection("Optimized")
local Button1 = Tab:CreateButton({
   Name = "Anti AFK",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/s4lcn53/AntiAFK/refs/heads/main/a", true))()
end,
})

local Button2 = Tab:CreateButton({
   Name = "Remove Texture",
   Callback = function()
       for i,v in next,(workspace:GetDescendants()) do
       if v:IsA("Part") then v.Material = Enum.Material.SmoothPlastic
       end
    end
end,
})

local Label = Tab:CreateLabel("How to use : just enabled click all sans and then anti-afk ‚úÖ", nil, Color3.fromRGB(255, 255, 255), false)
local Label = Tab:CreateLabel("Work best with accessories", nil, Color3.fromRGB(255, 255, 255), false)


-- Tab 2
local MainTab = Window:CreateTab("üëå Misc")
local Section = MainTab:CreateSection("Mod")
local Slider = MainTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 350},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "sliderws", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "JumpPower",
   Range = {1, 350},
   Increment = 1,
   Suffix = "Jump",
   CurrentValue = 16,
   Flag = "sliderjp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local Button = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
       --Toggles the infinite jump between on or off on every script run
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true
	
	--Notifies readiness
	game.StarterGui:SetCore("SendNotification", {Title="DinoHub"; Text="Done !"; Duration=5;})

	--The actuainfinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
   end,
})

-- button 2
local Button = MainTab:CreateButton({
   Name = "Destroy UI",
   Callback = function()
    Rayfield:Destroy()
end,
})

end
